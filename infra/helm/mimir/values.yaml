mimir-distributed:
  enterprise:
    enabled: false
  
  mimir:
    # https://grafana.com/docs/mimir/latest/configure/configuration-parameters/
    structuredConfig:
      common:
        storage:
          backend: s3
          s3:
            bucket_name: "anycluster-mimir"
            endpoint: "s3.ap-southeast-2.amazonaws.com"
      alertmanager_storage:
        backend: s3
        s3:
          bucket_name: "anycluster-mimir-alertmanager"
          endpoint: "s3.ap-southeast-2.amazonaws.com"
      blocks_storage:
        backend: s3
        s3:
          bucket_name: "anycluster-mimir-tsdb"
          endpoint: "s3.ap-southeast-2.amazonaws.com"
      ruler_storage:
        backend: s3
        s3:
          bucket_name: "anycluster-mimir-ruler"
          endpoint: "s3.ap-southeast-2.amazonaws.com"
  
  alertmanager:
    enabled: true
    persistentVolume:
      enabled: true
      storageClass: gp2
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi
    statefulSet:
      enabled: true

  kafka:
    # -- Enable Kafka for ingest-storage architecture
    enabled: true
    persistence:
      enabled: true
      size: 5Gi
      storageClassName: gp2

  compactor:
    persistentVolume:
      size: 10Gi
      storageClass: gp2
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  distributor:
    replicas: 1
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  ingester:
    persistentVolume:
      size: 10Gi
      storageClass: gp2
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi
    topologySpreadConstraints: {}
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: target # support for enterprise.legacyLabels
                  operator: In
                  values:
                    - ingester
            topologyKey: "kubernetes.io/hostname"

          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - ingester
            topologyKey: "kubernetes.io/hostname"

    zoneAwareReplication:
      topologyKey: "kubernetes.io/hostname"

  admin-cache:
    enabled: true
    replicas: 1

  chunks-cache:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  index-cache:
    enabled: true
    replicas: 1

  metadata-cache:
    enabled: true
    replicas: 1

  results-cache:
    enabled: true
    replicas: 1

  minio:
    enabled: false

  overrides_exporter:
    replicas: 1
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  querier:
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  query_frontend:
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  ruler:
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi

  store_gateway:
    persistentVolume:
      size: 10Gi
      storageClass: gp2
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi
    topologySpreadConstraints: {}
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: target # support for enterprise.legacyLabels
                  operator: In
                  values:
                    - store-gateway
            topologyKey: "kubernetes.io/hostname"

          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - store-gateway
            topologyKey: "kubernetes.io/hostname"
    zoneAwareReplication:
      topologyKey: "kubernetes.io/hostname"

  nginx:
    enabled: false

  # Grafana Enterprise Metrics feature related
  admin_api:
    replicas: 1
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi

  gateway:
    replicas: 1
    resources:
      limits:
        memory: 731Mi
      requests:
        cpu: 1
        memory: 512Mi

  # ingress:
  #   enabled: true
  #   ingressClassName: nginx
  #   hosts:
  #     - host: "mimir.stevejcliu.com"
  #       paths:
  #         - path: /
